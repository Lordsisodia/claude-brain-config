version: '3.8'

services:
  # IPFS Node 01 - Primary
  ipfs-node-01:
    image: ipfs/go-ipfs:v0.29.0
    container_name: ipfs-node-01
    hostname: ipfs-node-01
    ports:
      - "4001:4001"     # P2P swarm port
      - "5001:5001"     # API port
      - "8080:8080"     # Gateway port
    volumes:
      - ipfs-node-01-data:/data/ipfs
      - ./ipfs-config/node-01:/container-init.d:ro
    environment:
      IPFS_PROFILE: server
      IPFS_PATH: /data/ipfs
      LIBP2P_FORCE_PNET: 0
      # Performance optimizations for billion-scale
      IPFS_FD_MAX: 8192
      IPFS_ENABLE_PUBSUB_EXPERIMENT: "true"
      IPFS_ENABLE_NAMESYS_PUBSUB: "true"
      IPFS_ENABLE_SHARDING_EXPERIMENT: "true"
    command: >
      sh -c "
        ipfs init --profile server &&
        ipfs config --json Datastore.BloomFilterSize 1048576 &&
        ipfs config --json Datastore.StorageMax '\"1TB\"' &&
        ipfs config --json Gateway.Writable true &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"GET\", \"POST\", \"PUT\", \"DELETE\"]' &&
        ipfs config --json Swarm.ConnMgr.HighWater 200 &&
        ipfs config --json Swarm.ConnMgr.LowWater 50 &&
        ipfs config --json Routing.Type '\"dhtclient\"' &&
        ipfs config --json Reprovider.Strategy '\"pinned\"' &&
        ipfs daemon --enable-gc --routing=dhtclient
      "
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "ipfs id"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # IPFS Node 02 - Replica
  ipfs-node-02:
    image: ipfs/go-ipfs:v0.29.0
    container_name: ipfs-node-02
    hostname: ipfs-node-02
    ports:
      - "4002:4001"
      - "5002:5001"
      - "8081:8080"
    volumes:
      - ipfs-node-02-data:/data/ipfs
      - ./ipfs-config/node-02:/container-init.d:ro
    environment:
      IPFS_PROFILE: server
      IPFS_PATH: /data/ipfs
      LIBP2P_FORCE_PNET: 0
      IPFS_FD_MAX: 8192
      IPFS_ENABLE_PUBSUB_EXPERIMENT: "true"
      IPFS_ENABLE_NAMESYS_PUBSUB: "true"
      IPFS_ENABLE_SHARDING_EXPERIMENT: "true"
    command: >
      sh -c "
        ipfs init --profile server &&
        ipfs config --json Datastore.BloomFilterSize 1048576 &&
        ipfs config --json Datastore.StorageMax '\"1TB\"' &&
        ipfs config --json Gateway.Writable true &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"GET\", \"POST\", \"PUT\", \"DELETE\"]' &&
        ipfs config --json Swarm.ConnMgr.HighWater 200 &&
        ipfs config --json Swarm.ConnMgr.LowWater 50 &&
        ipfs config --json Routing.Type '\"dhtclient\"' &&
        ipfs config --json Reprovider.Strategy '\"pinned\"' &&
        ipfs bootstrap add /ip4/ipfs-node-01/tcp/4001/p2p/\$(ipfs --api=/ip4/ipfs-node-01/tcp/5001 id -f='<id>') &&
        ipfs daemon --enable-gc --routing=dhtclient
      "
    depends_on:
      - ipfs-node-01
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "ipfs id"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # IPFS Node 03 - Replica
  ipfs-node-03:
    image: ipfs/go-ipfs:v0.29.0
    container_name: ipfs-node-03
    hostname: ipfs-node-03
    ports:
      - "4003:4001"
      - "5003:5001"
      - "8082:8080"
    volumes:
      - ipfs-node-03-data:/data/ipfs
      - ./ipfs-config/node-03:/container-init.d:ro
    environment:
      IPFS_PROFILE: server
      IPFS_PATH: /data/ipfs
      LIBP2P_FORCE_PNET: 0
      IPFS_FD_MAX: 8192
      IPFS_ENABLE_PUBSUB_EXPERIMENT: "true"
      IPFS_ENABLE_NAMESYS_PUBSUB: "true"
      IPFS_ENABLE_SHARDING_EXPERIMENT: "true"
    command: >
      sh -c "
        ipfs init --profile server &&
        ipfs config --json Datastore.BloomFilterSize 1048576 &&
        ipfs config --json Datastore.StorageMax '\"1TB\"' &&
        ipfs config --json Gateway.Writable true &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' &&
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\"GET\", \"POST\", \"PUT\", \"DELETE\"]' &&
        ipfs config --json Swarm.ConnMgr.HighWater 200 &&
        ipfs config --json Swarm.ConnMgr.LowWater 50 &&
        ipfs config --json Routing.Type '\"dhtclient\"' &&
        ipfs config --json Reprovider.Strategy '\"pinned\"' &&
        ipfs bootstrap add /ip4/ipfs-node-01/tcp/4001/p2p/\$(ipfs --api=/ip4/ipfs-node-01/tcp/5001 id -f='<id>') &&
        ipfs bootstrap add /ip4/ipfs-node-02/tcp/4001/p2p/\$(ipfs --api=/ip4/ipfs-node-02/tcp/5001 id -f='<id>') &&
        ipfs daemon --enable-gc --routing=dhtclient
      "
    depends_on:
      - ipfs-node-01
      - ipfs-node-02
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "ipfs id"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # IPFS Cluster for coordinated pinning and replication
  ipfs-cluster-01:
    image: ipfs/ipfs-cluster:v1.1.1
    container_name: ipfs-cluster-01
    hostname: ipfs-cluster-01
    ports:
      - "9094:9094"     # HTTP API
      - "9095:9095"     # Proxy API
      - "9096:9096"     # Cluster swarm
    volumes:
      - ipfs-cluster-01-data:/data/ipfs-cluster
    environment:
      CLUSTER_PEERNAME: cluster-01
      CLUSTER_SECRET: ${CLUSTER_SECRET:-your-32-byte-hex-secret-here}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node-01/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
      CLUSTER_IPFSPROXY_LISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9095
      CLUSTER_IPFSCONNECTOR_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node-01/tcp/5001
      CLUSTER_MONITORPINGINTERVAL: 3s
      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 3
    depends_on:
      - ipfs-node-01
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9094/id || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ipfs-cluster-02:
    image: ipfs/ipfs-cluster:v1.1.1
    container_name: ipfs-cluster-02
    hostname: ipfs-cluster-02
    ports:
      - "9097:9094"
      - "9098:9095"
      - "9099:9096"
    volumes:
      - ipfs-cluster-02-data:/data/ipfs-cluster
    environment:
      CLUSTER_PEERNAME: cluster-02
      CLUSTER_SECRET: ${CLUSTER_SECRET:-your-32-byte-hex-secret-here}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node-02/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
      CLUSTER_IPFSPROXY_LISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9095
      CLUSTER_IPFSCONNECTOR_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node-02/tcp/5001
      CLUSTER_MONITORPINGINTERVAL: 3s
      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 3
    depends_on:
      - ipfs-node-02
      - ipfs-cluster-01
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9094/id || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  ipfs-cluster-03:
    image: ipfs/ipfs-cluster:v1.1.1
    container_name: ipfs-cluster-03
    hostname: ipfs-cluster-03
    ports:
      - "9100:9094"
      - "9101:9095"
      - "9102:9096"
    volumes:
      - ipfs-cluster-03-data:/data/ipfs-cluster
    environment:
      CLUSTER_PEERNAME: cluster-03
      CLUSTER_SECRET: ${CLUSTER_SECRET:-your-32-byte-hex-secret-here}
      CLUSTER_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node-03/tcp/5001
      CLUSTER_CRDT_TRUSTEDPEERS: "*"
      CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9094
      CLUSTER_IPFSPROXY_LISTENMULTIADDRESS: /ip4/0.0.0.0/tcp/9095
      CLUSTER_IPFSCONNECTOR_IPFSHTTP_NODEMULTIADDRESS: /dns4/ipfs-node-03/tcp/5001
      CLUSTER_MONITORPINGINTERVAL: 3s
      CLUSTER_REPLICATIONFACTORMIN: 2
      CLUSTER_REPLICATIONFACTORMAX: 3
    depends_on:
      - ipfs-node-03
      - ipfs-cluster-01
      - ipfs-cluster-02
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9094/id || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # IPFS Gateway for public access
  ipfs-gateway:
    image: ipfs/go-ipfs:v0.29.0
    container_name: ipfs-gateway
    hostname: ipfs-gateway
    ports:
      - "8080:8080"
    environment:
      IPFS_PROFILE: server
      IPFS_GATEWAY_READONLY: "false"
    command: >
      sh -c "
        ipfs init --profile server &&
        ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080 &&
        ipfs config --json Gateway.HTTPHeaders.Access-Control-Allow-Origin '[\"*\"]' &&
        ipfs config --json Gateway.HTTPHeaders.Access-Control-Allow-Methods '[\"GET\", \"POST\"]' &&
        ipfs bootstrap add /ip4/ipfs-node-01/tcp/4001/p2p/\$(ipfs --api=/ip4/ipfs-node-01/tcp/5001 id -f='<id>') &&
        ipfs bootstrap add /ip4/ipfs-node-02/tcp/4001/p2p/\$(ipfs --api=/ip4/ipfs-node-02/tcp/5001 id -f='<id>') &&
        ipfs bootstrap add /ip4/ipfs-node-03/tcp/4001/p2p/\$(ipfs --api=/ip4/ipfs-node-03/tcp/5001 id -f='<id>') &&
        ipfs daemon --writable
      "
    depends_on:
      - ipfs-node-01
      - ipfs-node-02
      - ipfs-node-03
    networks:
      - ipfs-cluster
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/api/v0/id || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  ipfs-node-01-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ipfs/node-01
  ipfs-node-02-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ipfs/node-02
  ipfs-node-03-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/ipfs/node-03
  ipfs-cluster-01-data:
    driver: local
  ipfs-cluster-02-data:
    driver: local
  ipfs-cluster-03-data:
    driver: local

networks:
  ipfs-cluster:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment variables for cluster secret
# Generate with: openssl rand -hex 32
# export CLUSTER_SECRET=your-generated-32-byte-hex-secret-here