{
  "name": "distributed-knowledge-graph",
  "version": "1.0.0",
  "description": "A billion-scale distributed knowledge graph system for AI agents with real-time collaboration, consensus mechanisms, and global memory synchronization",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "mocha testing/integration-tests.js --timeout 60000",
    "test:watch": "mocha testing/integration-tests.js --watch",
    "demo": "node demo/demo-scenario.js",
    "build": "docker-compose build",
    "up": "docker-compose up -d",
    "down": "docker-compose down",
    "logs": "docker-compose logs -f",
    "clean": "docker-compose down -v && docker system prune -f",
    "deploy:dev": "docker-compose --profile development up -d",
    "deploy:prod": "docker-compose up -d",
    "deploy:test": "docker-compose --profile testing up --abort-on-container-exit",
    "health": "node scripts/health-check.js",
    "benchmark": "node scripts/performance-benchmark.js",
    "lint": "eslint .",
    "format": "prettier --write ."
  },
  "keywords": [
    "distributed-systems",
    "knowledge-graph",
    "ai-agents",
    "consensus-mechanisms",
    "crdt",
    "blockchain",
    "neo4j",
    "graphql",
    "ipfs",
    "vector-database",
    "redis-cluster",
    "real-time-sync",
    "billion-scale",
    "collaborative-ai"
  ],
  "author": "Claude Code Assistant",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/your-org/distributed-knowledge-graph.git"
  },
  "dependencies": {
    "@apollo/gateway": "^2.5.7",
    "@apollo/server": "^4.9.5",
    "@apollo/subgraph": "^2.5.7",
    "axios": "^1.6.2",
    "crypto": "^1.0.1",
    "graphql": "^16.8.1",
    "ioredis": "^5.3.2",
    "ipfs-http-client": "^60.0.1",
    "multiformats": "^12.1.3",
    "neo4j-driver": "^5.15.0",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "chai": "^4.3.10",
    "eslint": "^8.55.0",
    "mocha": "^10.2.0",
    "nodemon": "^3.0.2",
    "prettier": "^3.1.1",
    "supertest": "^6.3.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "directories": {
    "test": "testing",
    "doc": "docs"
  },
  "config": {
    "neo4j": {
      "uri": "bolt://localhost:7687",
      "username": "neo4j",
      "password": "password"
    },
    "redis": {
      "cluster": [
        "localhost:6379",
        "localhost:6380", 
        "localhost:6381"
      ]
    },
    "ipfs": {
      "nodes": [
        "http://localhost:5001",
        "http://localhost:5002",
        "http://localhost:5003"
      ]
    },
    "vectorDb": {
      "pinecone": {
        "environment": "us-west1-gcp-free"
      },
      "weaviate": {
        "host": "localhost:8080"
      },
      "qdrant": {
        "host": "localhost:6333"
      }
    }
  },
  "performance": {
    "targetMetrics": {
      "nodeCreationRate": "50000 nodes/second",
      "queryLatency": "< 10ms simple queries",
      "consensusTime": "< 1 second",
      "syncLatency": "< 100ms",
      "availability": "> 99.99%",
      "maxNodes": "1 billion+",
      "maxRelationships": "10 billion+",
      "maxAgents": "10000+ concurrent"
    }
  },
  "deployment": {
    "minResources": {
      "cpu": "4 cores",
      "memory": "16GB",
      "storage": "100GB SSD"
    },
    "recommendedResources": {
      "cpu": "16 cores",
      "memory": "64GB",
      "storage": "1TB NVMe SSD"
    },
    "scalingTargets": {
      "nodes": "100+ cluster nodes",
      "storage": "100TB+ distributed",
      "throughput": "1M+ ops/second"
    }
  },
  "features": [
    "Billion-scale knowledge node storage",
    "Multi-shard Neo4j clustering with Fabric queries", 
    "GraphQL federation for unified API",
    "IPFS decentralized storage for large artifacts",
    "Blockchain consensus for truth verification",
    "Redis cluster for high-performance caching",
    "CRDT-based conflict-free replication",
    "Multi-provider vector database integration",
    "Real-time gossip protocol synchronization",
    "AI agent collaboration interfaces",
    "Democratic consensus mechanisms",
    "Byzantine fault tolerance",
    "Automatic failover and recovery",
    "Comprehensive monitoring and observability",
    "Production-ready Docker deployment"
  ],
  "architecture": {
    "components": [
      "Neo4j Cluster (Graph Storage)",
      "Redis Cluster (Distributed Cache)", 
      "IPFS Cluster (Decentralized Storage)",
      "Vector Databases (Embeddings)",
      "Consensus Layer (Truth Verification)",
      "GraphQL Gateway (Unified API)",
      "Sync Manager (Real-time Updates)",
      "CRDT Library (Conflict Resolution)",
      "Agent Interface (AI Integration)"
    ],
    "patterns": [
      "Microservices Architecture",
      "Event-Driven Design",
      "CQRS (Command Query Responsibility Segregation)",
      "Saga Pattern for Distributed Transactions",
      "Circuit Breaker for Fault Tolerance",
      "Bulkhead Isolation",
      "Distributed Consensus",
      "Eventually Consistent Replication"
    ]
  }
}