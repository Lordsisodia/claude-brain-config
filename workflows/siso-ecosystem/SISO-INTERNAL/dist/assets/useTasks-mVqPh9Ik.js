var T=Object.defineProperty,F=Object.defineProperties;var Q=Object.getOwnPropertyDescriptors;var S=Object.getOwnPropertySymbols;var K=Object.prototype.hasOwnProperty,U=Object.prototype.propertyIsEnumerable;var D=(o,c,n)=>c in o?T(o,c,{enumerable:!0,configurable:!0,writable:!0,value:n}):o[c]=n,m=(o,c)=>{for(var n in c||(c={}))K.call(c,n)&&D(o,n,c[n]);if(S)for(var n of S(c))U.call(c,n)&&D(o,n,c[n]);return o},_=(o,c)=>F(o,Q(c));var k=(o,c,n)=>new Promise((g,d)=>{var e=i=>{try{s(n.next(i))}catch(t){d(t)}},r=i=>{try{s(n.throw(i))}catch(t){d(t)}},s=i=>i.done?g(i.value):Promise.resolve(i.value).then(e,r);s((n=n.apply(o,c)).next())});import{dg as Y,dr as f,W as E}from"./vendor-C50ijZWh.js";import{s as u}from"./index-Blbobipf.js";function C(o){return k(this,null,function*(){console.log("Fetching task statistics for userId:",o);const{data:{user:c}}=yield u.auth.getUser();if(!c)throw console.log("No authenticated user found for task stats"),new Error("Not authenticated");try{let n=u.from("tasks").select("status, priority, created_at, completed_at");o&&(n=n.eq("assigned_to",o));const{data:g,error:d}=yield n;if(d)throw console.error("Error fetching task stats:",d),d;const e=g||[],r={pending:e.filter(a=>a.status==="pending").length,in_progress:e.filter(a=>a.status==="in_progress").length,completed:e.filter(a=>a.status==="completed").length},s={low:e.filter(a=>a.priority==="low").length,medium:e.filter(a=>a.priority==="medium").length,high:e.filter(a=>a.priority==="high").length,urgent:e.filter(a=>a.priority==="urgent").length},i=$(e),t={pending:r.pending,in_progress:r.in_progress,completed:r.completed,total:e.length};return console.log("Task stats calculated successfully:",{totals:t,byStatus:r,byPriority:s}),{byStatus:r,byPriority:s,byDay:i,totals:t}}catch(n){throw console.error("Failed to fetch task stats:",n),n}})}function $(o){const c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],n=new Date,g=[];for(let d=6;d>=0;d--){const e=new Date(n);e.setDate(e.getDate()-d);const r=c[e.getDay()],s=o.filter(t=>new Date(t.created_at).toDateString()===e.toDateString()).length,i=o.filter(t=>t.completed_at?new Date(t.completed_at).toDateString()===e.toDateString():!1).length;g.push({day:r,created:s,completed:i})}return g}function x(){const o=Y();return{useCreateTask:()=>f({mutationFn:e=>k(this,null,function*(){const{data:{user:r}}=yield u.auth.getUser();if(!r)throw new Error("You must be logged in to create tasks");console.log("Creating new task:",e);const{data:s,error:i}=yield u.from("tasks").insert(_(m({},e),{assigned_to:r==null?void 0:r.id,created_by:r==null?void 0:r.id})).select().maybeSingle();if(i)throw console.error("Error creating task:",i),i.message.includes("violates row-level security")?new Error("You do not have permission to create this task"):i;if(!s)throw console.error("Failed to create task - no data returned"),new Error("Failed to create task");return s}),onSuccess:()=>{o.invalidateQueries({queryKey:["tasks"]}),o.invalidateQueries({queryKey:["taskStats"]})}}),useUpdateTask:()=>f({mutationFn:e=>k(this,null,function*(){const{data:{user:r}}=yield u.auth.getUser();if(!r)throw new Error("You must be logged in to update tasks");console.log("Updating task:",e);const{data:s,error:i}=yield u.from("tasks").select("id, created_by, assigned_to").eq("id",e.id).maybeSingle();if(i)throw console.error("Error checking task existence:",i),new Error("Failed to verify task access");if(!s)throw console.error(`Task with id ${e.id} not found`),new Error("Task not found");if(s.created_by!==r.id&&s.assigned_to!==r.id)throw new Error("You do not have permission to update this task");const{data:t,error:a}=yield u.from("tasks").update(e).eq("id",e.id).select().maybeSingle();if(a)throw console.error("Error updating task:",a),a.message.includes("violates row-level security")?new Error("You do not have permission to update this task"):a;if(!t)throw console.error(`Task update failed - no data returned for id ${e.id}`),new Error("Failed to update task");return t}),onSuccess:()=>{o.invalidateQueries({queryKey:["tasks"]}),o.invalidateQueries({queryKey:["taskStats"]})}}),useDeleteTask:()=>f({mutationFn:e=>k(this,null,function*(){const{data:{user:r}}=yield u.auth.getUser();if(!r)throw new Error("You must be logged in to delete tasks");console.log("Deleting task:",e);const{data:s,error:i}=yield u.from("tasks").select("id, created_by, assigned_to").eq("id",e).maybeSingle();if(i)throw console.error("Error checking task existence:",i),new Error("Failed to verify task access");if(!s)throw console.error(`Task with id ${e} not found`),new Error("Task not found");if(s.created_by!==r.id&&s.assigned_to!==r.id)throw new Error("You do not have permission to delete this task");const{error:t}=yield u.from("tasks").delete().eq("id",e);if(t)throw console.error("Error deleting task:",t),t.message.includes("violates row-level security")?new Error("You do not have permission to delete this task"):t;return e}),onSuccess:()=>{o.invalidateQueries({queryKey:["tasks"]}),o.invalidateQueries({queryKey:["taskStats"]})}}),useDeleteAllTasks:()=>f({mutationFn:e=>k(this,null,function*(){const{data:{user:r}}=yield u.auth.getUser();if(!r)throw new Error("You must be logged in to delete tasks");console.log("Deleting all tasks with filters:",e);let s=u.from("tasks").delete().or(`created_by.eq.${r.id},assigned_to.eq.${r.id}`);e!=null&&e.category&&(s=s.eq("category",e.category)),e!=null&&e.status?s=s.eq("status",e.status):s=s.neq("status","completed"),e!=null&&e.priority&&(s=s.eq("priority",e.priority));const{error:i,count:t}=yield s;if(i)throw console.error("Error deleting tasks:",i),i;return console.log(`Successfully deleted ${t||0} tasks`),t||0}),onSuccess:()=>{o.invalidateQueries({queryKey:["tasks"]}),o.invalidateQueries({queryKey:["taskStats"]})}})}}function M(){const o=t=>(t||[]).map(l=>_(m({},l),{status:n(l.status),priority:g(l.priority)})).sort((l,p)=>{const y={urgent:0,high:1,medium:2,low:3};return(y[l.priority]||99)-(y[p.priority]||99)}),c=(t,a)=>(console.log("Fetching tasks with category:",t,"userId:",a),E({queryKey:["tasks",t,a],queryFn:()=>k(this,null,function*(){try{let l=u.from("tasks").select("id, title, description, status, priority, category, assigned_to, due_date, created_at, updated_at");a&&(l=l.eq("assigned_to",a)),t&&(l=l.eq("category",t));const{data:p,error:y}=yield l;if(y){if(console.error("Error fetching tasks:",y),y.message.includes("infinite recursion")||y.message.includes("policy")){console.log("ðŸ”§ [TASKS] RLS issue detected, attempting fallback query...");const v=u.from("tasks").select("id, title, description, status, priority, category, due_date, assigned_to, created_by, created_at, updated_at"),{data:b,error:q}=yield v;if(q)return console.error("Fallback query also failed:",q),[];let h=b||[];return a&&(h=h.filter(w=>w.assigned_to===a||w.created_by===a)),t&&(h=h.filter(w=>w.category===t)),o(h)}throw y}return o(p||[])}catch(l){return console.error("Critical error in task query:",l),[]}}),meta:{onError:l=>{console.error("Error in task query:",l)}}})),n=t=>["pending","in_progress","completed"].includes(t)?t:"pending",g=t=>["low","medium","high","urgent"].includes(t)?t:"medium",d=t=>E({queryKey:["taskStats",t],queryFn:()=>C(t)}),{useCreateTask:e,useUpdateTask:r,useDeleteTask:s,useDeleteAllTasks:i}=x();return{useTaskQuery:c,useTaskStatsQuery:d,useCreateTask:e,useUpdateTask:r,useDeleteTask:s,useDeleteAllTasks:i}}export{x as a,M as u};
