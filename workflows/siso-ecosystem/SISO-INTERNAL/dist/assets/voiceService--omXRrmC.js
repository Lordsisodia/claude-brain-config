var C=Object.defineProperty;var m=(h,o,e)=>o in h?C(h,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):h[o]=e;var A=(h,o,e)=>m(h,typeof o!="symbol"?o+"":o,e);var g=(h,o,e)=>new Promise((t,l)=>{var r=s=>{try{a(e.next(s))}catch(i){l(i)}},I=s=>{try{a(e.throw(s))}catch(i){l(i)}},a=s=>s.done?t(s.value):Promise.resolve(s.value).then(r,I);a((e=e.apply(h,o)).next())});class y{constructor(){A(this,"recognition",null);A(this,"synthesis",null);A(this,"isListening",!1);A(this,"groqApiKey",null);this.initializeSpeechRecognition(),this.initializeSpeechSynthesis(),this.groqApiKey=null}initializeSpeechRecognition(){if("webkitSpeechRecognition"in window||"SpeechRecognition"in window){const o=window.SpeechRecognition||window.webkitSpeechRecognition;this.recognition=new o}}initializeSpeechSynthesis(){"speechSynthesis"in window&&(this.synthesis=window.speechSynthesis)}isSpeechRecognitionSupported(){return console.log("🔍 [VOICE AI] Checking speech recognition support..."),console.log("🌐 [VOICE AI] User agent:",navigator.userAgent),console.log("🔒 [VOICE AI] Is HTTPS:",window.location.protocol==="https:"),console.log("🏠 [VOICE AI] Is localhost:",window.location.hostname==="localhost"),this.recognition?(console.log("✅ [VOICE AI] Speech recognition is available"),!0):(console.error("❌ [VOICE AI] Speech recognition not available"),!1)}checkMicrophonePermissions(){return g(this,null,function*(){if(console.log("🎤 [VOICE AI] Checking microphone permissions..."),"permissions"in navigator)try{const o=yield navigator.permissions.query({name:"microphone"});if(console.log("🔍 [VOICE AI] Permissions API result:",o.state),o.state==="granted")return console.log("✅ [VOICE AI] Microphone permission already granted via Permissions API"),!0;if(o.state==="denied")return console.log("❌ [VOICE AI] Microphone permission explicitly denied"),!1}catch(o){console.warn("⚠️ [VOICE AI] Permissions API failed, trying getUserMedia:",o)}try{if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return console.error("❌ [VOICE AI] MediaDevices API not supported"),!1;const o=yield navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!0,noiseSuppression:!0,autoGainControl:!0}});return console.log("✅ [VOICE AI] Microphone access granted via getUserMedia"),o.getTracks().forEach(e=>{e.stop(),console.log("🛑 [VOICE AI] Cleaned up media track:",e.kind)}),!0}catch(o){return console.error("❌ [VOICE AI] getUserMedia failed:",o),console.error("❌ [VOICE AI] Error details:",{name:o.name,message:o.message,constraint:o.constraint}),!1}})}isTTSSupported(){return this.synthesis!==null||this.groqApiKey!==null}startListening(l,r){return g(this,arguments,function*(o,e,t={}){if(console.log("🎤 [VOICE AI] Starting speech recognition..."),console.log("🎤 [VOICE AI] Config:",{language:t.language||"en-US",continuous:t.continuous||!1,interimResults:t.interimResults||!0,maxAlternatives:t.maxAlternatives||1}),!this.isSpeechRecognitionSupported()){const I="Speech recognition not supported in this browser. Please use Chrome, Edge, or Safari.";throw console.error("❌ [VOICE AI] Recognition not supported:",I),e(I),new Error(I)}if(this.isListening){const I="Already listening";throw console.warn("⚠️ [VOICE AI] Already listening:",I),e(I),new Error(I)}try{(yield this.checkMicrophonePermissions())?console.log("✅ [VOICE AI] Microphone permission verified"):console.warn("⚠️ [VOICE AI] Microphone permission check failed, but continuing with SpeechRecognition API...")}catch(I){console.warn("⚠️ [VOICE AI] Permission check failed, proceeding with SpeechRecognition:",I)}return new Promise((I,a)=>{this.recognition.lang=t.language||"en-US",this.recognition.continuous=t.continuous||!1,this.recognition.interimResults=t.interimResults||!0,this.recognition.maxAlternatives=t.maxAlternatives||1,this.recognition.onstart=()=>{this.isListening=!0,console.log("✅ [VOICE AI] Speech recognition started successfully"),console.log("🎯 [VOICE AI] Listening state:",this.isListening),I()},this.recognition.onresult=s=>{let i="",n="";console.log("📝 [VOICE AI] Processing speech results..."),console.log("📊 [VOICE AI] Results count:",s.results.length),console.log("📍 [VOICE AI] Result index:",s.resultIndex);for(let c=s.resultIndex;c<s.results.length;c++){const p=s.results[c][0].transcript,d=s.results[c][0].confidence,u=s.results[c].isFinal;console.log(`📋 [VOICE AI] Result ${c}:`,{transcript:p,confidence:d,isFinal:u,alternatives:s.results[c].length}),u?(i+=p,console.log("✅ [VOICE AI] Final transcript:",i)):(n+=p,console.log("⏳ [VOICE AI] Interim transcript:",n))}i?(console.log("🎯 [VOICE AI] Sending final result:",i),o(i,!0)):n&&(console.log("📝 [VOICE AI] Sending interim result:",n),o(n,!1))},this.recognition.onerror=s=>{this.isListening=!1;let i="";switch(s.error){case"no-speech":i="No speech detected. Please try speaking again.",console.warn("⚠️ [VOICE AI] No speech detected");break;case"audio-capture":i="No microphone found. Please check your microphone connection.",console.error("❌ [VOICE AI] Audio capture failed");break;case"not-allowed":i='Microphone access denied. Click the microphone icon 🎤 in your browser address bar and select "Allow", then try again.',console.error("❌ [VOICE AI] Permission denied - browser blocked microphone access"),this.logPermissionDiagnostics();break;case"network":i="Network error occurred. Please check your internet connection.",console.error("❌ [VOICE AI] Network error");break;case"aborted":i="Speech recognition was aborted.",console.warn("⚠️ [VOICE AI] Recognition aborted");break;case"bad-grammar":i="Grammar error in speech recognition.",console.error("❌ [VOICE AI] Grammar error");break;case"language-not-supported":i="Language not supported. Please try English.",console.error("❌ [VOICE AI] Language not supported");break;default:i=`Speech recognition error: ${s.error}`,console.error("❌ [VOICE AI] Unknown error:",s.error)}console.error("❌ [VOICE AI] Recognition error details:",{error:s.error,message:s.message,timestamp:new Date().toISOString(),userAgent:navigator.userAgent}),e(i),a(new Error(i))},this.recognition.onend=()=>{this.isListening=!1,console.log("🔚 [VOICE AI] Speech recognition ended"),console.log("🎯 [VOICE AI] Final listening state:",this.isListening)};try{console.log("🚀 [VOICE AI] Attempting to start recognition..."),this.recognition.start()}catch(s){this.isListening=!1,console.error("❌ [VOICE AI] Failed to start recognition:",s),a(s)}})})}stopListening(){this.recognition&&this.isListening&&(this.recognition.stop(),this.isListening=!1)}getIsListening(){return this.isListening}speak(I){return g(this,arguments,function*(o,e={},t,l,r){console.log("🔊 [VOICE AI] TTS Request initiated"),console.log("📄 [VOICE AI] Text to speak:",o.substring(0,100)+(o.length>100?"...":"")),console.log("⚙️ [VOICE AI] TTS Config:",e),console.log("🔑 [VOICE AI] Groq API available:",!!this.groqApiKey);try{this.groqApiKey&&o.length<=1e4?(console.log("🌟 [VOICE AI] Using Groq TTS (Premium)"),yield this.speakWithGroqTTS(o,e,t,l,r)):(console.log("🔄 [VOICE AI] Using Web Speech API (Fallback)"),this.groqApiKey||console.warn("⚠️ [VOICE AI] No Groq API key configured"),o.length>1e4&&console.warn("⚠️ [VOICE AI] Text too long for Groq TTS:",o.length),yield this.speakWithWebAPI(o,e,t,l,r))}catch(a){console.error("❌ [VOICE AI] TTS failed, falling back to Web Speech API:",a);try{yield this.speakWithWebAPI(o,e,t,l,r)}catch(s){throw console.error("❌ [VOICE AI] All TTS methods failed:",s),r==null||r(s instanceof Error?s.message:"TTS failed"),s}}})}speakWithGroqTTS(I){return g(this,arguments,function*(o,e={},t,l,r){if(console.log("🌟 [VOICE AI] Groq TTS Starting..."),console.log("📊 [VOICE AI] Request details:",{textLength:o.length,voice:e.voice||"Fritz-PlayAI",model:"playai-tts",apiKeyPresent:!!this.groqApiKey}),!this.groqApiKey)throw new Error("Groq API key not configured");try{t==null||t(),console.log("🚀 [VOICE AI] Calling Groq TTS API...");const a={model:"playai-tts",input:o.substring(0,1e4),voice:e.voice||"Fritz-PlayAI",response_format:"mp3"};console.log("📝 [VOICE AI] API Request:",a);const s=yield fetch("https://api.groq.com/openai/v1/audio/speech",{method:"POST",headers:{Authorization:`Bearer ${this.groqApiKey}`,"Content-Type":"application/json"},body:JSON.stringify(a)});if(console.log("📡 [VOICE AI] API Response status:",s.status),console.log("📋 [VOICE AI] Response headers:",Object.fromEntries(s.headers.entries())),!s.ok){const p=yield s.text();throw console.error("❌ [VOICE AI] Groq API Error:",{status:s.status,statusText:s.statusText,error:p}),new Error(`Groq TTS API error: ${s.statusText}`)}console.log("✅ [VOICE AI] Groq TTS API success");const i=yield s.blob();console.log("🎵 [VOICE AI] Audio blob created:",{size:i.size,type:i.type});const n=URL.createObjectURL(i),c=new Audio(n);console.log("🎧 [VOICE AI] Audio element created, starting playback..."),c.onended=()=>{console.log("🏁 [VOICE AI] Groq TTS playback completed"),URL.revokeObjectURL(n),l==null||l()},c.onerror=()=>{console.error("❌ [VOICE AI] Audio playback failed"),URL.revokeObjectURL(n),r==null||r("Audio playback failed")},yield c.play(),console.log("▶️ [VOICE AI] Groq TTS playback started successfully")}catch(a){throw console.error("❌ [VOICE AI] Groq TTS Error:",a),r==null||r(a instanceof Error?a.message:"TTS failed"),a}})}speakWithWebAPI(I){return g(this,arguments,function*(o,e={},t,l,r){return console.log("🔄 [VOICE AI] Web Speech API TTS Starting..."),console.log("📊 [VOICE AI] Web API details:",{textLength:o.length,rate:e.rate||1,pitch:e.pitch||1,volume:e.volume||1,voice:e.voice||"default"}),new Promise((a,s)=>{if(!this.synthesis){const n="Text-to-speech not supported";console.error("❌ [VOICE AI] Web Speech API not supported:",n),r==null||r(n),s(new Error(n));return}console.log("🛑 [VOICE AI] Canceling any existing speech..."),this.synthesis.cancel();const i=new SpeechSynthesisUtterance(o);if(i.rate=e.rate||1,i.pitch=e.pitch||1,i.volume=e.volume||1,console.log("⚙️ [VOICE AI] Utterance configured:",{rate:i.rate,pitch:i.pitch,volume:i.volume}),e.voice){const n=this.synthesis.getVoices();console.log("🎭 [VOICE AI] Available voices:",n.length);const c=n.find(p=>p.name.includes(e.voice)||p.lang.includes(e.voice));c?(i.voice=c,console.log("✅ [VOICE AI] Voice selected:",{name:c.name,lang:c.lang,gender:c.gender})):console.warn("⚠️ [VOICE AI] Requested voice not found:",e.voice)}i.onstart=()=>{console.log("▶️ [VOICE AI] Web Speech API playback started"),t==null||t()},i.onend=()=>{console.log("🏁 [VOICE AI] Web Speech API playback completed"),l==null||l(),a()},i.onerror=n=>{const c=`Speech synthesis error: ${n.error}`;console.error("❌ [VOICE AI] Web Speech API Error:",{error:n.error,message:n.message,timestamp:new Date().toISOString()}),r==null||r(c),s(new Error(c))},console.log("🚀 [VOICE AI] Starting Web Speech API synthesis..."),this.synthesis.speak(i)})})}stopSpeaking(){this.synthesis&&this.synthesis.cancel()}getAvailableVoices(){return this.synthesis?this.synthesis.getVoices():[]}getGroqVoices(){return["Arista-PlayAI","Atlas-PlayAI","Basil-PlayAI","Briggs-PlayAI","Calum-PlayAI","Celeste-PlayAI","Cheyenne-PlayAI","Chip-PlayAI","Cillian-PlayAI","Deedee-PlayAI","Fritz-PlayAI","Gail-PlayAI","Indigo-PlayAI","Mamaw-PlayAI","Mason-PlayAI","Mikail-PlayAI","Mitch-PlayAI","Quinn-PlayAI","Thunder-PlayAI"]}logPermissionDiagnostics(){return g(this,null,function*(){var e;console.log("🔍 [VOICE AI] === PERMISSION DIAGNOSTICS ===");const o={speechRecognition:!!window.SpeechRecognition||!!window.webkitSpeechRecognition,mediaDevices:!!navigator.mediaDevices,getUserMedia:!!((e=navigator.mediaDevices)!=null&&e.getUserMedia),permissions:!!navigator.permissions,protocol:window.location.protocol,hostname:window.location.hostname,userAgent:navigator.userAgent.substring(0,100)};if(console.log("🌐 [VOICE AI] Browser capabilities:",o),navigator.permissions)try{const t=yield navigator.permissions.query({name:"microphone"});console.log("🎤 [VOICE AI] Microphone permission state:",t.state)}catch(t){console.log("❌ [VOICE AI] Could not query microphone permission:",t)}console.log("🔍 [VOICE AI] === END DIAGNOSTICS ===")})}forceChromeMicrophoneAccess(){return g(this,null,function*(){console.log("🔧 [VOICE AI] Attempting Chrome-specific microphone bypass...");for(let o=0;o<3;o++)try{return console.log(`🔄 [VOICE AI] Chrome bypass attempt ${o+1}/3`),(yield navigator.mediaDevices.getUserMedia({audio:{autoGainControl:!1,echoCancellation:!1,noiseSuppression:!1}})).getTracks().forEach(t=>t.stop()),console.log("✅ [VOICE AI] Chrome bypass successful!"),!0}catch(e){console.log(`❌ [VOICE AI] Chrome bypass attempt ${o+1} failed:`,e),yield new Promise(t=>setTimeout(t,100))}try{return console.log("🔄 [VOICE AI] Trying Chrome video=false strategy..."),(yield navigator.mediaDevices.getUserMedia({audio:!0,video:!1})).getTracks().forEach(e=>e.stop()),console.log("✅ [VOICE AI] Chrome video=false strategy successful!"),!0}catch(o){console.log("❌ [VOICE AI] Chrome video=false strategy failed:",o)}return!1})}retryMicrophoneAccess(){return g(this,null,function*(){if(console.log("🔄 [VOICE AI] Retrying microphone access..."),yield this.forceChromeMicrophoneAccess())return!0;try{return(yield navigator.mediaDevices.getUserMedia({audio:!0})).getTracks().forEach(t=>t.stop()),console.log("✅ [VOICE AI] Retry successful with basic constraints"),!0}catch(e){console.log("❌ [VOICE AI] Basic retry failed:",e)}try{return(yield navigator.mediaDevices.getUserMedia({audio:{sampleRate:44100,sampleSize:16,channelCount:1}})).getTracks().forEach(t=>t.stop()),console.log("✅ [VOICE AI] Retry successful with specific constraints"),!0}catch(e){console.log("❌ [VOICE AI] Specific constraints retry failed:",e)}return!1})}debugMicrophoneAccess(){return g(this,null,function*(){console.log("🔧 [VOICE AI] === MICROPHONE DEBUG TEST ==="),yield this.logPermissionDiagnostics(),console.log("🧪 [VOICE AI] Testing permission check...");try{const e=yield this.checkMicrophonePermissions();console.log("🎤 [VOICE AI] Permission check result:",e?"SUCCESS":"FAILED")}catch(e){console.log("❌ [VOICE AI] Permission check error:",e)}console.log("🧪 [VOICE AI] Testing speech recognition...");const o=this.isSpeechRecognitionSupported();console.log("🎙️ [VOICE AI] Speech recognition supported:",o),console.log("🧪 [VOICE AI] Testing retry mechanism...");try{const e=yield this.retryMicrophoneAccess();console.log("🔄 [VOICE AI] Retry result:",e?"SUCCESS":"FAILED")}catch(e){console.log("❌ [VOICE AI] Retry error:",e)}console.log("🔧 [VOICE AI] === DEBUG TEST COMPLETE ==="),console.log("📋 [VOICE AI] To run this test, open browser console and run: voiceService.debugMicrophoneAccess()")})}cleanup(){this.stopListening(),this.stopSpeaking()}}const V=new y;export{V as v};
