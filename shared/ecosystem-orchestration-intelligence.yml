# Ecosystem Orchestration Intelligence
# Revolutionary cross-project integration and workflow automation

Ecosystem_Integration_Mapping: &Ecosystem_Integration_Mapping
  # Cross-Project Dependencies and Integrations
  project_relationships:
    mallocra_activities_main:
      base_path: "ACTIVE-CLIENTS/mallocra-activities-main/"
      mcp_configurations:
        - ".mcp.json: Supabase MCP with project-specific tokens"
        - ".claude.json: Claude Code project configuration"
        - ".cursor/mcp.json: Cursor IDE MCP integration"
        - ".cursor/mcp-mallorca.json: Project-specific MCP setup"
        - ".claude/settings.local.json: Local Claude settings"
      automation_scripts:
        deployment: ["scripts/deployment-checklist.sh", "scripts/claude-auto-mcp.sh"]
        mcp_management: ["scripts/setup-supabase-mcp.sh", "scripts/mcp-manager.sh", "scripts/kill-mcp-processes.sh"]
        testing: ["scripts/test-booking-flow.js", "scripts/quick-test.js"]
        project_management: ["scripts/create-github-issues.js", "scripts/github_issues.py"]
        data_management: ["scripts/populate-activities.js", "scripts/cleanup-old-activities.js"]
      environment_configurations:
        production: ".env.local"
        development: ".env.local.new"
        mcp_specific: ".env.mcp"
        backup_environments: [".env.local.backup", ".env.local.backup-clerk-integration"]
        template: ".env.example"
        
    ubahcryp_trading_main:
      base_path: "ACTIVE-CLIENTS/ubahcrypcom-main/"
      complex_structure:
        frontend: "src/, components/, pages/"
        backend: "backend/src/, backend/.env, backend/.env.example"
        brain_system: "brain/scripts/, brain/ai/"
        github_integration: "github-goldminer-agent/, github-source-code/"
        vue_components: "github-source-code/vue-tradingview/"
      configuration_layers:
        base_config: "config/tsconfig.base.json"
        environment_configs: [".env", ".env.local", ".env.example", "backend/.env"]
        vscode_settings: ".vscode/settings.json"
        
    delta_sports:
      base_path: "ACTIVE-CLIENTS/Delta-Sports/"
      orchestration_system:
        orchestrator_config: "orchestrator/orchestrator-config.json"
        frontend_backend_separation: "frontend/, backend/"
        nested_structures: "frontend/backend/"
      environment_management: "backend/.env.example"
      
    siso_client_base:
      base_path: "SISO_ECOSYSTEM/SISO-CLIENT-BASE/"
      multi_platform_scripts: "scripts/build-projects.sh with siso-agency and claudia targets"
      complex_build_system: "scripts/generate-seo-files.js, scripts/validate-build.sh"
      project_specific_builds: ["project:siso:dev", "project:claudia:dev"]

MCP_Ecosystem_Intelligence: &MCP_Ecosystem_Intelligence
  # Advanced MCP configuration and management
  mcp_configuration_patterns:
    project_specific_mcp:
      mallocra_supabase: "Supabase MCP with tourism platform database access"
      ubahcryp_crypto: "Potential crypto/blockchain MCP integrations"
      general_mcp_access: "SISO_ECOSYSTEM/MCP-ACCESS-TOOLS/ for system-wide tools"
      
    mcp_management_automation:
      setup_scripts: ["setup-supabase-mcp.sh", "setup-simple-mcp.sh", "auto-setup-mcp.sh"]
      management_scripts: ["mcp-manager.sh", "global-mcp-manager.sh", "mcp-startup.sh"]
      debugging_scripts: ["kill-mcp-processes.sh", "test-mcp-persistence.sh"]
      claude_integration: ["claude-auto-mcp.sh", "claude-startup-wrapper.sh"]
      
    mcp_configuration_files:
      multiple_configs_per_project: "Projects have .mcp.json, .claude.json, .cursor/mcp.json"
      environment_specific: ".env.mcp for MCP-specific variables"
      token_management: "SUPABASE_ACCESS_TOKEN in environment configurations"
      read_only_security: "--read-only flags for production safety"

AI_Workflow_Intelligence: &AI_Workflow_Intelligence
  # Claude task queue and AI workflow patterns
  ai_task_management:
    claude_priority_queue: "claude-improvement/ultra-scraping-system/claude-priority-queue/"
    task_patterns:
      github_tasks: "claude_task_github_*.json - repository analysis and code mining"
      hackernews_tasks: "claude_task_hackernews_*.json - tech news and trend analysis"
      reddit_tasks: "claude_task_reddit_*.json - community discussion mining"
      gold_mining: "claude_task_gold_*.json - high-value content extraction"
      
    ai_system_configurations:
      claude_flow_configs: "claude-flow.config.json across multiple projects"
      enhanced_claude_code: "enhanced_claude_code.json for AI capability enhancement"
      memory_systems: "memory/claude-flow-data.json for persistent AI memory"
      pattern_analysis: "logs/ai_pattern_analysis.json, logs/claude_code_insights.json"
      
    automation_intelligence:
      code_bank_exports: "code_bank_*.json for knowledge extraction and reuse"
      batch_configurations: "batch-config-*.json for enterprise AI workflows"
      system_configs: "CONFIG/system-configs/ with development, production, testing variants"

Environment_Configuration_Intelligence: &Environment_Configuration_Intelligence
  # Advanced environment and configuration management
  environment_patterns:
    multi_environment_support:
      production: ".env.local for live environments"
      development: ".env.local.new for development testing"
      backup_systems: "Multiple .env.local.backup-* for rollback capability"
      service_specific: ".env.mcp for MCP service configuration"
      
    configuration_backup_strategies:
      timestamped_backups: ".env.local.backup-1749244855 (timestamp-based)"
      feature_backups: ".env.local.backup-clerk-integration (feature-specific)"
      
    cross_project_environment_patterns:
      frontend_backend_split: "Separate .env files for frontend and backend"
      service_isolation: "Different .env configurations for different services"
      template_management: ".env.example files for onboarding and setup"

Script_Automation_Intelligence: &Script_Automation_Intelligence
  # Comprehensive automation and script ecosystem
  automation_categories:
    deployment_automation:
      checklist_scripts: "deployment-checklist.sh for systematic deployment verification"
      mcp_deployment: "setup and management scripts for MCP integration"
      environment_setup: "Environment configuration and verification scripts"
      
    development_workflow_automation:
      testing_scripts: "test-booking-flow.js, quick-test.js for development testing"
      data_management: "populate-activities.js, cleanup-old-activities.js"
      project_setup: "create-milestones.sh, add-project-example.sh"
      
    integration_automation:
      github_integration: "create-github-issues.js, github_issues.py"
      mcp_integration: "Complex MCP setup and management workflow"
      claude_integration: "claude-startup-wrapper.sh for AI workflow integration"
      
    monitoring_and_debugging:
      environment_debugging: "debug-env.js, verify-env.js"
      mcp_debugging: "test-mcp-persistence.sh, kill-mcp-processes.sh"
      system_monitoring: "Various monitoring and health check scripts"

Cross_Project_Intelligence: &Cross_Project_Intelligence
  # Understanding project relationships and shared resources
  shared_resource_mapping:
    siso_ecosystem_integration:
      shared_tools: "SISO_ECOSYSTEM/MCP-ACCESS-TOOLS/ provides tools for all projects"
      shared_documentation: "SISO_ECOSYSTEM/DOCUMENTATION/ for cross-project knowledge"
      shared_automation: "SISO_ECOSYSTEM/SISO_AUTOMATION_HUB/ for workflow automation"
      
    claude_improvement_integration:
      ai_enhancement: "claude-improvement/ enhances AI capabilities across all projects"
      scraping_systems: "ultra-scraping-system/ provides data for multiple projects"
      autonomous_systems: "AUTONOMOUS-CLAUDE-SYSTEM/ for advanced AI workflows"
      
    technology_sharing:
      shared_configurations: "Similar package.json, tsconfig.json patterns across projects"
      common_toolchains: "Vite, React, TypeScript, Tailwind used across multiple projects"
      integration_patterns: "MCP, Supabase, Claude integration patterns reused"

Orchestration_System_Intelligence: &Orchestration_System_Intelligence
  # Advanced orchestration and coordination systems
  orchestration_patterns:
    delta_sports_orchestrator:
      config: "orchestrator/orchestrator-config.json"
      purpose: "Coordinate frontend and backend development and deployment"
      architecture: "Multi-tier application coordination"
      
    siso_project_orchestration:
      build_orchestration: "scripts/build-projects.sh with multiple project targets"
      project_switching: "project:siso:dev, project:claudia:dev for different applications"
      multi_platform_coordination: "Electron, Tauri, Web platform coordination"
      
    claude_flow_orchestration:
      claude_flow_configs: "claude-flow.config.json for AI workflow orchestration"
      enhanced_systems: "enhanced-tmux-system/ for advanced development environment"
      memory_coordination: "memory/ directories for persistent AI knowledge"
      
    ai_task_orchestration:
      priority_queue_management: "Hundreds of claude_task_*.json files"
      multi_source_coordination: "GitHub, Reddit, HackerNews data coordination"
      gold_mining_orchestration: "Automated high-value content extraction workflows"